/**
 * @brief Class for implementing sanitation requests.
 */

package models.sanitation;
import models.map.Location;
import models.user.User;
import java.util.Date;
import java.sql.Timestamp;

public class SanitationRequest implements Comparable<SanitationRequest> {

    /**
     * Enumerations
     */
    public enum Priority {
        LOW, MEDIUM, HIGH
    }
    public enum Status {
        INCOMPLETE, COMPLETE
    }

    /**
     * Class fields.
     */
    private int requestID;              // Request ID (unique)
    private Location location;          // Location of the spill
    private Priority priority;          // Priority of the request
    private String description;         // Textual description of request
    private Status status;              // Status of request
    private User requester;             // Employee who made request
    private Timestamp requestTime;      // Request timestamp
    private User servicer;              // Custodian who serviced request
    private Timestamp claimedTime;      // Time custodian claimed request
    private Timestamp completedTime;    // Time custodian marked request complete

    /**
     * @brief Constructs new sanitation request to add to database.
     * @param location Location of the spill
     * @param priority Priority of the request
     * @param description Textual description of request
     * @param requester Employee who made request
     */
    public SanitationRequest(Location location, Priority priority, String description, User requester)
    {
        this.requestID = 0;
        this.location = location;
        this.priority = priority;
        this.status = Status.INCOMPLETE;
        this.description = description;
        this.requester = requester;
        this.requestTime = new Timestamp(new Date().getTime());
        this.servicer = null;
        this.claimedTime = null;
        this.completedTime = null;
    }

    /**
     * @brief Constructs sanitation request with all fields.
     * @param requestID Request ID (generated by database)
     * @param location Location of the spill
     * @param priority Priority of the request
     * @param status Status of request
     * @param description Textual description of request
     * @param requester Employee who made request
     * @param requestTime Time request was made
     * @param servicer Custodian who fulfilled the request
     * @param claimedTime Time service was claimed by a custodian
     * @param completedTime Time service was marked completed
     */
    public SanitationRequest(
            int requestID,
            Location location,
            Priority priority,
            Status status,
            String description,
            User requester,
            Timestamp requestTime,
            User servicer,
            Timestamp claimedTime,
            Timestamp completedTime)
    {
        this.requestID = requestID;
        this.location = location;
        this.priority = priority;
        this.status = status;
        this.description = description;
        this.requester = requester;
        this.requestTime = requestTime;
        this.servicer = servicer;
        this.claimedTime = claimedTime;
        this.completedTime = completedTime;
    }

    /**
     * Converts priority to integer
     */
    private Integer priorityToInt() {
        switch(priority) {
            case HIGH: return 1;
            case MEDIUM: return 2;
            case LOW: return 3;
            default: return 0;
        }
    }

    /**
     * @brief Compares sanitation requests based on priority then request timestamp
     */
    public int compareTo(SanitationRequest request) {
        int priorityCmp = priorityToInt().compareTo(request.priorityToInt());
        if (priorityCmp == 0) {
            return requestTime.compareTo(request.requestTime);
        } else {
            return priorityCmp;
        }
    }

    /**
     * Attribute getters
     */
    public int getRequestID() {
        return requestID;
    }
    public Location getLocation() {
        return location;
    }
    public String getLocationShortName(){
        if(location==null)return null;
        return location.getShortName();
        }
    public Priority getPriority() {
        return priority;
    }
    public Status getStatus() {
        return status;
    }
    public String getDescription() {
        return description;
    }
    public User getRequester() {
        return requester;
    }
    public String getRequesterUserName(){
        if(requester==null)return null;
        return requester.getUsername();}
    public String getServicerUserName(){
        if (servicer == null) return null;
        return servicer.getUsername();
    }
    public Timestamp getRequestTime() {
        return requestTime;
    }
    public User getServicer() {
        return servicer;
    }
    public Timestamp getClaimedTime() { return claimedTime; }
    public Timestamp getCompletedTime() { return completedTime; }

    /**
     * Attribute setters
     */
    public void setStatus(Status status) {
        this.status = status;
    }
    public void setServicer(User servicer) {
        this.servicer = servicer;
    }
    public void setClaimedTime(Timestamp serviceTime) { this.claimedTime = serviceTime; }
    public void setCompletedTime(Timestamp completedTime) { this.completedTime = completedTime; }
}