/**
 * @brief Class for implementing sanitation requests.
 */

package sanitation.models;

import java.sql.Timestamp;
import java.util.Date;

public class SanitationRequest implements Comparable<SanitationRequest> {

    /**
     * Enumerations
     */
    public enum Priority {
        LOW, MEDIUM, HIGH
    }
    public enum Status {
        INCOMPLETE, COMPLETE
    }

    /**
     * Class fields.
     */
    private int requestID;              // Request ID (unique)
    private String locationID;          // Location of the spill
    private Priority priority;          // Priority of the request
    private String description;         // Textual description of request
    private Status status;              // Status of request
    private String requesterUsername;   // Employee who made request
    private Timestamp requestTime;      // Request timestamp
    private String servicerUsername;    // Employee who serviced request
    private Timestamp claimedTime;      // Time custodian claimed request
    private Timestamp completedTime;    // Time custodian marked request complete

    /**
     * @brief Constructs new sanitation request to add to database.
     * @param locationID Location of the spill
     * @param priority Priority of the request
     * @param description Textual description of request
     * @param requester Employee whso made request
     */
    public SanitationRequest(String locationID, Priority priority, String description, IEmployee requester)
    {
        this.requestID = 0;
        this.locationID = locationID;
        this.priority = priority;
        this.status = Status.INCOMPLETE;
        this.description = description;
        this.requesterUsername = requester.getUsername();
        this.requestTime = new Timestamp(new Date().getTime());
        this.servicerUsername = null;
        this.claimedTime = null;
        this.completedTime = null;
    }

    /**
     * @brief Constructs sanitation request with all fields.
     * @param requestID Request ID (generated by database)
     * @param locationID Location of the spill
     * @param priority Priority of the request
     * @param status Status of request
     * @param description Textual description of request
     * @param requesterUsername Employee who made request
     * @param requestTime Time request was made
     * @param servicerUsername Employee who fulfilled the request
     * @param claimedTime Time service was claimed by a custodian
     * @param completedTime Time service was marked completed
     */
    public SanitationRequest(
            int requestID,
            String locationID,
            Priority priority,
            Status status,
            String description,
            String requesterUsername,
            Timestamp requestTime,
            String servicerUsername,
            Timestamp claimedTime,
            Timestamp completedTime)
    {
        this.requestID = requestID;
        this.locationID = locationID;
        this.priority = priority;
        this.status = status;
        this.description = description;
        this.requesterUsername = requesterUsername;
        this.requestTime = requestTime;
        this.servicerUsername = servicerUsername;
        this.claimedTime = claimedTime;
        this.completedTime = completedTime;
    }

    /**
     * @brief Marks request as claimed by given employee at time of method call.
     * @param employee Employee who claimed the request.
     */
    public void markClaimedBy(IEmployee employee) {
        this.servicerUsername = employee.getUsername();
        this.claimedTime = new Timestamp(new Date().getTime());
    }

    /**
     * @brief Marks request as unclaimed.
     */
    public void markUnclaimed() {
        this.servicerUsername = null;
        this.claimedTime = null;
    }

    /**
     * @brief Marks request as completed at time of the method call.
     */
    public void markComplete() {
        this.status = Status.COMPLETE;
        this.completedTime = new Timestamp(new Date().getTime());
    }

    /**
     * @brief Marks request as incomplete.
     */
    public void markIncomplete() {
        this.status = Status.INCOMPLETE;
        this.completedTime = null;
    }

    /**
     * Converts priority to integer
     */
    private Integer priorityToInt() {
        switch(priority) {
            case HIGH: return 1;
            case MEDIUM: return 2;
            case LOW: return 3;
            default: return 0;
        }
    }

    /**
     * @brief Compares sanitation requests based on priority then request timestamp
     */
    public int compareTo(SanitationRequest request) {
        int priorityCmp = priorityToInt().compareTo(request.priorityToInt());
        if (priorityCmp == 0) {
            return requestTime.compareTo(request.requestTime);
        } else {
            return priorityCmp;
        }
    }

    /**
     * @brief Converts request to string.
     */
    public String toString() {
        String string = "SanitationRequest(" +
                "ID: " + requestID + ", " +
                "Location: " + locationID + ", " +
                "Priority: " + priority.name() + ", " +
                "Status: " + status.name() + ", " +
                "Requester: " + requesterUsername + ", " +
                "Request Time: " + requestTime.toString() + ", " +
                "Servicer: " + strToStr(servicerUsername) + ", " +
                "Claimed Time: " + tsToStr(claimedTime) + ", " +
                "Completed Time: " + tsToStr(completedTime) + ")";
        return string;
    }

    /**
     * @brief Converts null strings to "null"
     */
    private String strToStr(String string) {
        if (string == null) return "null";
        else return string;
    }

    /**
     * @brief Converts timestamps to strings
     */
    private String tsToStr(Timestamp timestamp) {
        if (timestamp == null) return "null";
        else return timestamp.toString();
    }

    /**
     * Attribute getters
     */
    public int getRequestID() {
        return requestID;
    }
    public String getLocationID() {
        return locationID;
    }
    public Priority getPriority() {
        return priority;
    }
    public Status getStatus() {
        return status;
    }
    public String getDescription() {
        return description;
    }
    public String getRequesterUsername() {
        return requesterUsername;
    }
    public Timestamp getRequestTime() {
        return requestTime;
    }
    public String getServicerUsername(){
        return servicerUsername;
    }
    public Timestamp getClaimedTime() { return claimedTime; }
    public Timestamp getCompletedTime() { return completedTime; }

    /**
     * Attribute setters
     */
    public void setRequestID(int requestID) {
        this.requestID = requestID;
    }
    public void setStatus(Status status) {
        this.status = status;
    }
    public void setServicerUsername(String servicerUsername) {
        this.servicerUsername = servicerUsername;
    }
    public void setClaimedTime(Timestamp serviceTime) {
        this.claimedTime = serviceTime;
    }
    public void setCompletedTime(Timestamp completedTime) {
        this.completedTime = completedTime;
    }
}